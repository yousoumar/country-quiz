{"version":3,"sources":["assets/adventure.svg","components/Response.js","assets/winners.svg","components/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","newQuestion","firstTestState","firstTestSetState","score","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","className","alt","App","useState","countriesState","countriesSetState","storageCountries","JSON","parse","localStorage","getItem","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","gameOverState","gameOverSetState","toggleFlagCapitalState","toggleFlagCapitalSetState","useRef","tourNumber","includes","push","country","newPossibleResponses","splice","Math","floor","random","length","sort","country1","country2","parseInt","numericCode","play","possibleResponses","useEffect","fetch","then","response","json","data","filter","item","capital","flag","setItem","stringify","id","resultsImg","adventure","map","possibleResponse","target","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0054b140.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, newQuestion, firstTestState, firstTestSetState, score }) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }else{\n            return\n        }\n        \n        \n        setTimeout(()=>{\n            \n            newQuestion();\n            \n        }, 1000);\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport Response from './Response';\nimport resultsImg from '../assets/winners.svg';\n\nfunction App() {\n\n  // store data sent by the API\n  const [countriesState, countriesSetState] = useState([]);\n  const storageCountries = JSON.parse(localStorage.getItem('countries')) ;\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // prevents user from trying the same question multiple times\n  let [firstTestState, firstTestSetState] = useState(true);\n\n  // play and end game\n  const [gameOverState, gameOverSetState] = useState(false);\n\n  // allows to alternate questions between flag and capital\n  const [toggleFlagCapitalState, toggleFlagCapitalSetState] = useState(false);\n\n  // to store possible responses reference\n  const ref = useRef([]);\n\n  // to store score\n  const score = useRef(10);\n\n  // count the number of game turns\n  let tourNumber = useRef(0);\n\n  useEffect(() => {\n    \n    if (!storageCountries){\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        data = data.filter(item => item.name && item.capital && item.flag && item.numericCode);\n        data.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()))\n        localStorage.setItem('countries', JSON.stringify(data));\n\n        let country = data.splice(Math.floor(Math.random()*(data.length)), 1)[0];\n        let possibleResponses = data.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(data);\n      } );\n    }else{\n\n        play();\n\n    }\n   \n    \n    \n  }, []);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  function newQuestion() {\n    ref.current = [];   \n    tourNumber.current ++;\n    \n    if(tourNumber.current >= 10){\n      gameOverSetState(true);\n      \n    }\n     \n\n    let country, newPossibleResponses;\n    country =  countriesState.splice(Math.floor(Math.random()*(countriesState.length)), 1)[0];\n    countriesState.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    newPossibleResponses = countriesState.splice(0, 3);\n    newPossibleResponses = [country, ...newPossibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n  \n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    toggleFlagCapitalSetState(!toggleFlagCapitalState);\n    firstTestSetState(true);\n  }\n  \n  function play(){\n    let country = storageCountries.splice(Math.floor(Math.random()*(storageCountries.length)), 1)[0];\n    let possibleResponses = storageCountries.splice(0, 3);\n    possibleResponses = [...possibleResponses, country].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    tourNumber.current = 0;\n    score.current = 10;\n    \n\n    correctResponseSetState(country);\n    possibleResponsesSetState(possibleResponses);\n    countriesSetState(storageCountries);\n    gameOverSetState(false)\n  }\n  return (\n    <>\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        {\n          gameOverState ? \n          \n          <div className = \"results\">\n            <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n            <h2>Results</h2>\n            <p>You got <span>{score.current}/10</span> correct answers</p>\n            <button className=\"button\" onClick = { e => play()}>\n              Try again\n            </button>\n          </div> \n          : \n          <>\n            <div className=\"logo\">\n              <img src={adventure}alt=\"\" /> \n            </div>\n            {\n              toggleFlagCapitalState ? \n              <div>\n                <div className=\"flag\"><img src={correctResponseState.flag} alt=\"\" /></div>\n                <div className=\"question\">Which country does this flag belong to? </div>\n              </div>\n              :\n              <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n            }\n            \n            <ul className=\"responses\">\n              {\n                \n                possibleResponsesState.map((possibleResponse, index) => \n                                          <Response\n                                            name = {possibleResponse.name}\n                                            key = {possibleResponse.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            countriesSetState = {countriesSetState}\n                                            countriesState = {countriesState}\n                                            newQuestion = {newQuestion}\n                                            possibleResponsesSetState = {possibleResponsesSetState}\n                                            possibleResponsesState = {possibleResponsesState}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                            gameOverSetState = {gameOverSetState}\n                                            score = {score}\n                                            tourNumber = {tourNumber}\n                                  \n                                          />\n                                          )\n                                          \n             }\n            </ul>\n          </>\n      \n          \n        }\n      </div>\n\n    </div>\n    <footer><p>created by <a target=\"_blank\" href=\"https://github.com/yousoumar\" rel=\"noreferrer\">yousoumar</a> - devchallenges.io</p></footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}