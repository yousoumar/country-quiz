{"version":3,"sources":["assets/adventure.svg","components/Response/Response.js","assets/winners.svg","components/App/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","newQuestion","firstTestState","firstTestSetState","score","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","className","alt","App","storageCountries","JSON","parse","localStorage","getItem","useState","countriesState","countriesSetState","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","useRef","tourNumber","gameOverState","gameOverSetState","useEffect","play","fetch","then","response","json","data","setItem","stringify","country","Math","floor","random","length","countriesWithoutCurrentQuestionCountry","filter","item","possibleResponses","splice","includes","push","sortMethode","newPossibleResponses","sort","country1","country2","area","population","id","resultsImg","adventure","capital","map","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,MAA0B,sC,OCC1B,SAASA,EAAT,GAA6I,IAA1HC,EAAyH,EAAzHA,KAAMC,EAAmH,EAAnHA,MAAOC,EAA4G,EAA5GA,gBAAiBC,EAA2F,EAA3FA,uBAAwBC,EAAmE,EAAnEA,SAAUC,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,eAAgBC,EAA4B,EAA5BA,kBAAmBC,EAAS,EAATA,MAoC9I,OACI,qBAEIC,QAAW,SAACC,GAAD,OArCIC,EAqCiBD,EAAEE,mBAnCnCN,IACCC,GAAkB,GACCI,EAAQE,SAAS,GAAGC,YAClBZ,EAAgBF,MACjCW,EAAQI,UAAUC,IAAI,WACtBL,EAAQM,cAAc,OAAOC,IAAMC,qCAGnCX,EAAMY,UACNT,EAAQI,UAAUC,IAAI,aACtBL,EAAQM,cAAc,OAAOC,IAAMC,qCACnChB,EAAuBkB,SAAQ,SAAAV,GACvBA,EAAQE,SAAS,GAAGC,YAAcZ,EAAgBF,OAClDW,EAAQI,UAAUC,IAAI,WACtBL,EAAQM,cAAc,OAAOC,IAAMC,wCASnDG,YAAW,WAEPf,GAAkB,GAClBF,MAED,OA9BP,IAAuBM,GAsCfY,IAAOnB,EAHX,UAMI,+BAAOoB,OAAOC,aAAa,GAAKxB,KAChC,+BAAOD,IACP,sBAAM0B,UAAY,OAAlB,SAAyB,qBAAKR,IAAI,GAAGS,IAAI,SAPlC3B,GCvCJ,UAA0B,oCC0K1B4B,MArKf,WAGE,IAAMC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,cACzD,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAGA,EAAwDF,mBAAS,IAAjE,mBAAOG,EAAP,KAA6BC,EAA7B,KAGA,EAA4DJ,mBAAS,IAArE,mBAAOK,EAAP,KAA+BC,EAA/B,KAGMhC,EAAQiC,iBAAO,GAGjBC,EAAaD,iBAAO,GAExB,EAA0CP,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACAC,qBAAU,WAEHhB,EAiBDiB,IAhBFC,MAAM,wCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJnB,aAAaoB,QAAQ,YAAatB,KAAKuB,UAAUF,IAEjD,IAAIG,EAAUH,EAAKI,KAAKC,MAAMD,KAAKE,SAAUN,EAAKO,SAC9CC,EAAyCR,EAAKS,QAAO,SAAAC,GAAI,OAAIA,EAAK7D,OAASsD,EAAQtD,QACnF8D,EAAoBH,EAAuCI,OAAO,EAAG,GACzED,EAAiB,CAAIR,GAAJ,mBAAgBQ,IAEjCxB,EAAwBgB,GACxBd,EAA0BsB,GAC1B1B,EAAkBuB,QAUrB,IAIH,IAAMpC,EAAMkB,iBAAO,IAEnB,SAASrC,EAASO,GAEZA,IAAaY,EAAIH,QAAQ4C,SAASrD,IACpCY,EAAIH,QAAQ6C,KAAKtD,GAKrB,MAA0CuB,oBAAS,GAAnD,mBAAK5B,EAAL,KAAqBC,EAArB,KACI2D,EAAczB,kBAAO,GAEzB,SAASpC,IASP,IAAIiD,EAAQK,EAAwCQ,EARpDzB,EAAWtB,UACRsB,EAAWtB,SAAW,GACvBwB,GAAiB,GAEnBrB,EAAIH,QAAU,GACdgB,EAAkBD,EAAeyB,QAAO,SAAAC,GAAI,OAAIA,EAAK7D,OAASqC,EAAqBrC,SAInFsD,EAAUnB,EAAeoB,KAAKC,MAAMD,KAAKE,SAAUtB,EAAeuB,SAC9DQ,EAAY9C,SAOd8C,EAAY9C,SAAW8C,EAAY9C,SAEnC+C,GADAR,EAAyCxB,EAAeyB,QAAO,SAAAC,GAAI,OAAIA,EAAK7D,OAASsD,EAAQtD,SAC/B+D,OAAO,EAAG,IACnDE,KAAKX,GAC1Ba,EAAqBC,MAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASC,KAAKhB,KAAKE,SAAWY,EAASE,KAAKhB,KAAKE,cAVnGS,EAAY9C,SAAW8C,EAAY9C,QAEnC+C,GADAR,EAAyCxB,EAAeyB,QAAO,SAAAC,GAAI,OAAIA,EAAK7D,OAASsD,EAAQtD,QAAMoE,MAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASE,WAAWjB,KAAKE,SAAUY,EAASG,WAAWjB,KAAKE,aAC9HM,OAAO,EAAG,IACxEI,EAAoB,CAAIb,GAAJ,mBAAgBa,KACfC,MAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASE,WAAWjB,KAAKE,SAAUY,EAASG,WAAWjB,KAAKE,aAQhHrB,EAAkBuB,GAClBrB,EAAwBgB,GACxBd,EAA0B2B,GAC1B5D,GAAkB,GAGpB,SAASuC,IACP,IAAIQ,EAAUzB,EAAiB0B,KAAKC,MAAMD,KAAKE,SAAU5B,EAAiB6B,SACtEC,EAAyC9B,EAAiB+B,QAAO,SAAAC,GAAI,OAAIA,EAAK7D,OAASsD,EAAQtD,QAC/F8D,EAAoBH,EAAuCI,OAAO,EAAG,GACzED,EAAiB,CAAIR,GAAJ,mBAAgBQ,IAEjCxB,EAAwBgB,GACxBd,EAA0BsB,GAC1B1B,EAAkBuB,GAClBjB,EAAWtB,QAAU,EACrBZ,EAAMY,QAAU,EAChBwB,GAAiB,GAEnB,OACE,qCACA,sBAAK6B,GAAG,MAAR,UACE,8CACA,qBAAK/C,UAAU,YAAf,SAEIiB,EAEA,sBAAKjB,UAAY,UAAjB,UACE,qBAAKA,UAAU,MAAf,SAAqB,qBAAKR,IAAKwD,EAAY/C,IAAI,OAC/C,yCACA,yCAAW,iCAAOnB,EAAMY,QAAb,QAAX,sBACA,wBAAQM,UAAU,SAASjB,QAAY,SAAAC,GAAC,OAAIoC,KAA5C,0BAKF,qCACE,qBAAKpB,UAAU,OAAf,SACA,qBAAKR,IAAKyD,EAAUhD,IAAI,OAExB,sBAAKD,UAAU,WAAf,UAA2BW,EAAqBuC,QAAhD,0BACA,oBAAIlD,UAAU,YAAd,SAGIa,EAAuBsC,KAAI,SAAC5B,EAAUhD,GAAX,OACD,cAACF,EAAD,CACEC,KAAQiD,EAASjD,KAEjBC,MAAQA,EACRC,gBAAmBmC,EACnBjC,SAAWA,EACXD,uBAA0BoB,EAAIH,QAC9BgB,kBAAqBA,EACrBD,eAAkBA,EAClB9B,YAAeA,EACfmC,0BAA6BA,EAC7BD,uBAA0BA,EAC1BjC,eAAkBA,EAClBC,kBAAqBA,EACrBqC,iBAAoBA,EACpBpC,MAASA,EACTkC,WAAcA,GAdPO,EAASjD,mBA4BxD,iCAAQ,4CAAc,mBAAG8E,OAAO,SAASC,KAAK,gCAAxB,uBAAd,+BC/JZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d360af07.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, newQuestion, firstTestState, firstTestSetState, score }) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }else{\n            return\n        }\n        \n        \n        setTimeout(()=>{\n            \n            firstTestSetState(true);\n            newQuestion();\n            \n        }, 1000)\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../../assets/adventure.svg';\nimport Response from '../Response/Response';\nimport resultsImg from '../../assets/winners.svg';\n\nfunction App() {\n\n  // store data sent by the API\n  const storageCountries = JSON.parse(localStorage.getItem('countries')) ;\n  const [countriesState, countriesSetState] = useState([]);\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // to store score\n  const score = useRef(5);\n\n  // count the number of game turns\n  let tourNumber = useRef(0);\n\n  const [gameOverState, gameOverSetState] = useState(false);\n  useEffect(() => {\n    \n    if (!storageCountries){\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        localStorage.setItem('countries', JSON.stringify(data));\n\n        let country = data[Math.floor(Math.random()*(data.length))];\n        let countriesWithoutCurrentQuestionCountry = data.filter(item => item.name !== country.name);\n        let possibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses];\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(countriesWithoutCurrentQuestionCountry);\n      } );\n    }else{\n\n        play();\n\n    }\n   \n    \n    \n  }, []);\n\n\n  // to store possible responses reference\n  const ref = useRef([]);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  let [firstTestState, firstTestSetState] = useState(true);\n  let sortMethode = useRef(true)\n\n  function newQuestion() {\n    tourNumber.current ++;\n    if(tourNumber.current >= 5){\n      gameOverSetState(true)\n    }\n    ref.current = [];\n    countriesSetState(countriesState.filter(item => item.name !== correctResponseState.name));\n    \n\n    let country,countriesWithoutCurrentQuestionCountry ,newPossibleResponses;\n    country = countriesState[Math.floor(Math.random()*(countriesState.length))];\n    if(!sortMethode.current){\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name).sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses = [country, ...newPossibleResponses];\n      newPossibleResponses.sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n    }else{\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name);\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses.push(country);\n      newPossibleResponses.sort((country1, country2)=> (country2.area*Math.random() - country1.area*Math.random()))\n    }\n    countriesSetState(countriesWithoutCurrentQuestionCountry);\n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    firstTestSetState(true);\n  }\n  \n  function play(){\n    let country = storageCountries[Math.floor(Math.random()*(storageCountries.length))];\n    let countriesWithoutCurrentQuestionCountry = storageCountries.filter(item => item.name !== country.name);\n    let possibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n    possibleResponses = [country, ...possibleResponses];\n\n    correctResponseSetState(country);\n    possibleResponsesSetState(possibleResponses);\n    countriesSetState(countriesWithoutCurrentQuestionCountry);\n    tourNumber.current = 0;\n    score.current = 5;\n    gameOverSetState(false)\n  }\n  return (\n    <>\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        {\n          gameOverState ? \n          \n          <div className = \"results\">\n            <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n            <h2>Results</h2>\n            <p>You got <span>{score.current}/5</span> correct answers</p>\n            <button className=\"button\" onClick = { e => play()}>\n              Try again\n            </button>\n          </div> \n          : \n          <>\n            <div className=\"logo\">\n            <img src={adventure}alt=\"\" /> \n            </div>\n            <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n            <ul className=\"responses\">\n              {\n                \n                possibleResponsesState.map((response, index) => \n                                          <Response\n                                            name = {response.name}\n                                            key = {response.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            countriesSetState = {countriesSetState}\n                                            countriesState = {countriesState}\n                                            newQuestion = {newQuestion}\n                                            possibleResponsesSetState = {possibleResponsesSetState}\n                                            possibleResponsesState = {possibleResponsesState}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                            gameOverSetState = {gameOverSetState}\n                                            score = {score}\n                                            tourNumber = {tourNumber}\n                                  \n                                          />\n                                          )\n                                          \n             }\n            </ul>\n          </>\n      \n          \n        }\n      </div>\n\n    </div>\n    <footer><p>created by <a target=\"_blank\" href=\"https://github.com/yousoumars\">yousoumar</a> - devchallenges.io</p></footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}