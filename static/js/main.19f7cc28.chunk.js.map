{"version":3,"sources":["assets/adventure.svg","components/Response.js","assets/winners.svg","components/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","newQuestion","firstTestState","firstTestSetState","score","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","className","alt","App","useState","countriesState","countriesSetState","storageCountries","JSON","parse","localStorage","getItem","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","gameOverState","gameOverSetState","useRef","tourNumber","sortMethode","includes","push","country","newPossibleResponses","splice","Math","floor","random","length","sort","country1","country2","area","population","play","possibleResponses","useEffect","fetch","then","response","json","data","console","log","setItem","stringify","id","resultsImg","adventure","capital","map","possibleResponse","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19f7cc28.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, newQuestion, firstTestState, firstTestSetState, score }) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }else{\n            return\n        }\n        \n        \n        setTimeout(()=>{\n            \n            newQuestion();\n            \n        }, 1000);\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport Response from './Response';\nimport resultsImg from '../assets/winners.svg';\n\nfunction App() {\n\n  // store data sent by the API\n  const [countriesState, countriesSetState] = useState([]);\n  const storageCountries = JSON.parse(localStorage.getItem('countries')) ;\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // prevents user from trying the same question multiple times\n  let [firstTestState, firstTestSetState] = useState(true);\n\n  // play and end game\n  const [gameOverState, gameOverSetState] = useState(false);\n\n  // to store possible responses reference\n  const ref = useRef([]);\n\n  // to store score\n  const score = useRef(5);\n\n  // count the number of game turns\n  let tourNumber = useRef(0);\n\n  // to sort countries list differently for each new question\n  let sortMethode = useRef(true)\n\n  useEffect(() => {\n    \n    if (!storageCountries){\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        console.log(data)\n        localStorage.setItem('countries', JSON.stringify(data));\n\n        let country = data.splice(Math.floor(Math.random()*(data.length)), 1)[0];\n        let possibleResponses = data.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses];\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(data);\n      } );\n    }else{\n\n        play();\n\n    }\n   \n    \n    \n  }, []);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  function newQuestion() {\n    tourNumber.current ++;\n    if(tourNumber.current >= 5){\n      gameOverSetState(true)\n    }\n    ref.current = [];    \n\n    let country,countriesWithoutCurrentQuestionCountry ,newPossibleResponses;\n    country =  countriesState.splice(Math.floor(Math.random()*(countriesState.length)), 1)[0];\n\n    if(!sortMethode.current){\n      sortMethode.current = !sortMethode.current\n      countriesState.sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n\n      newPossibleResponses = countriesState.splice(0, 3);\n      newPossibleResponses = [country, ...newPossibleResponses];\n      newPossibleResponses.sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n    }else{\n      sortMethode.current = !sortMethode.current\n      countriesState.sort((country1, country2)=> (country2.area*Math.random()- country1.area*Math.random()));\n\n      newPossibleResponses = countriesState.splice(0, 3);\n      newPossibleResponses = [country, ...newPossibleResponses];\n      newPossibleResponses.sort((country1, country2)=> (country2.area*Math.random()- country1.area*Math.random()));\n    }\n    countriesSetState(countriesState);\n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    firstTestSetState(true);\n  }\n  \n  function play(){\n    let country = storageCountries.splice(Math.floor(Math.random()*(storageCountries.length)), 1)[0];\n    let possibleResponses = storageCountries.splice(0, 3);\n    possibleResponses = [country, ...possibleResponses];\n\n    tourNumber.current = 0;\n    score.current = 5;\n    correctResponseSetState(country);\n    possibleResponsesSetState(possibleResponses);\n    countriesSetState(storageCountries);\n    gameOverSetState(false)\n  }\n  return (\n    <>\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        {\n          gameOverState ? \n          \n          <div className = \"results\">\n            <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n            <h2>Results</h2>\n            <p>You got <span>{score.current}/5</span> correct answers</p>\n            <button className=\"button\" onClick = { e => play()}>\n              Try again\n            </button>\n          </div> \n          : \n          <>\n            <div className=\"logo\">\n            <img src={adventure}alt=\"\" /> \n            </div>\n            <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n            <ul className=\"responses\">\n              {\n                \n                possibleResponsesState.map((possibleResponse, index) => \n                                          <Response\n                                            name = {possibleResponse.name}\n                                            key = {possibleResponse.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            countriesSetState = {countriesSetState}\n                                            countriesState = {countriesState}\n                                            newQuestion = {newQuestion}\n                                            possibleResponsesSetState = {possibleResponsesSetState}\n                                            possibleResponsesState = {possibleResponsesState}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                            gameOverSetState = {gameOverSetState}\n                                            score = {score}\n                                            tourNumber = {tourNumber}\n                                  \n                                          />\n                                          )\n                                          \n             }\n            </ul>\n          </>\n      \n          \n        }\n      </div>\n\n    </div>\n    <footer><p>created by <a target=\"_blank\" href=\"https://github.com/yousoumar\">yousoumar</a> - devchallenges.io</p></footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}