{"version":3,"sources":["assets/adventure.svg","assets/winners.svg","components/Loader.js","components/Response.js","components/App.js","components/useFetch.js","components/useGame.js","index.js"],"names":["Loader","className","Response","props","onClick","e","element","currentTarget","firstTestState","firstTestSetState","children","innerText","correctResponse","name","classList","add","querySelector","src","process","score","current","possibleShownResponsesRef","forEach","setTimeout","newQuestion","ref","addToPossibleShownResponsesRef","String","fromCharCode","index","alt","App","data","url","useState","countriesState","countriesSetState","storageData","useRef","apiErrorState","apiErrorSetState","loaderState","loaderSetState","useEffect","timer","fetch","then","response","ok","json","Error","filter","item","capital","flag","numericCode","slice","catch","clearTimeout","useFetch","game","toggleFlagCapitalState","toggleFlagCapitalSetState","gameOverState","gameOverSetState","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","tourNumber","includes","push","country","newPossibleResponses","splice","Math","floor","random","length","sort","country1","country2","parseInt","newRound","displayQuestion","displayPossibleResponses","map","possibleResponse","displayScore","displayRemainingQuestions","gameOver","useGame","id","resultsImg","adventure","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc01ce5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","export default function Loader() {\n    return (\n        <div className = \"loader\">\n            \n            <p>Loading...</p>\n        </div>\n    )\n}\n","\nexport default function Response(props) {\n    \n    function checkResponse(element) {\n\n        if(props.firstTestState){\n            props.firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse ===  props.correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg';\n                \n            }else{\n                props.score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                props.possibleShownResponsesRef.forEach(element => {\n                    if (element.children[1].innerText ===  props.correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg';\n                    }\n                });\n            }\n        }else{\n            return;\n        }\n\n        setTimeout(()=>{\n            \n            props.newQuestion();\n            \n        }, 1500);\n\n    }\n\n    return (\n        <li\n            key = {props.name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {props.addToPossibleShownResponsesRef}\n            \n        >\n            <span>{String.fromCharCode(65 + props.index)}</span>\n            <span>{props.name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","import {useEffect} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport resultsImg from '../assets/winners.svg';\nimport Loader from './Loader';\nimport useFetch from './useFetch';\nimport useGame from './useGame';\n\nfunction App() {\n\n  const data = useFetch(\"https://restcountries.eu/rest/v2/all\");\n\n  const game = useGame (data);\n\n  \n  useEffect(()=>{\n\n    if (data.countriesState.length !== 0 ){\n      game.newQuestion();\n    }\n   \n    // eslint-disable-next-line\n  }, [data.countriesState]);\n  \n  return (\n    <>\n      {\n        data.loaderState === 'loading' ? <Loader /> : \n        <>\n          {\n            data.apiErrorState ? <p className = \"apiError\">We have issues with our database. Please come back later :)</p> : \n              <div id=\"app\">\n                <h1>Country quiz</h1>\n                <div className=\"container\">\n                  {\n                    game.gameOver ? \n                    \n                    <div className = \"results\">\n                      <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n                      <h2>Results</h2>\n                      <p>You got <span>{game.displayScore()}</span> correct answers.</p>\n                      <button className=\"button\" onClick = { e => game.newRound()}>\n                        Try again\n                      </button>\n                    </div> \n                    : \n                    <>\n                      <div className=\"logo\">\n                        <img src={adventure}alt=\"\" /> \n                      </div>\n                      <div className = \"tour-number\"> {game.displayRemainingQuestions()}</div>\n                      {\n                        game.displayQuestion()\n                      }\n                      \n                      <ul className=\"responses\">\n                        {\n                          \n                          game.displayPossibleResponses()\n                                                    \n                        }\n                      </ul> \n                    </>\n                  }\n                </div>\n\n              </div>\n          }\n        </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","import {useState, useEffect, useRef} from 'react';\n\nexport default function useFetch(url) {\n\n    // stores data sent by the API\n    const [countriesState, countriesSetState] = useState([]);\n\n    // stores data sent by the API so that we have less requests\n    const storageData = useRef([]);\n\n    // to handle api call errors\n    const [apiErrorState, apiErrorSetState] = useState(false);\n\n    // what allows us to handle our loader\n    const [loaderState, loaderSetState] = useState('loading');\n\n    useEffect(() => {\n\n        const timer = setTimeout(()=>{\n            fetch(url)\n            .then(response => {\n                if (response.ok){\n                    return response.json();  \n               }else{\n                    throw Error();\n               }\n            })\n            .then(data =>{\n                data = data.filter(item => item.name && item.capital && item.flag && item.numericCode);\n                storageData.current = data.slice();\n                countriesSetState(data.slice());\n                loaderSetState('loaded');\n                \n            })\n            .catch(()=>{\n                apiErrorSetState(true);\n                loaderSetState('loaded');\n            });\n        }, 1000); \n\n        return ()=>{\n            clearTimeout(timer);\n        }\n        \n    }, [url]);\n\n    return {countriesState, countriesSetState, storageData : storageData.current, apiErrorState, loaderState};\n}\n","import {useState, useRef} from 'react';\nimport Response from './Response';\n\nexport default function useGame(data) {\n\n    // allows to alternate questions between flag and capital\n    const [toggleFlagCapitalState, toggleFlagCapitalSetState] = useState(false);\n\n    // play and end game\n    const [gameOverState, gameOverSetState] = useState(false);\n\n    // prevents user from trying the same question multiple times\n    const [firstTestState, firstTestSetState] = useState(true);\n\n    // current question response\n    const [correctResponseState, correctResponseSetState] = useState({});\n\n    // current question possible responses\n    const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n    // stores possible responses reference\n    const possibleShownResponsesRef = useRef([]);\n\n    // stores score\n    const score = useRef(10);\n\n    // counts remaining questions number \n    const tourNumber = useRef(0);\n \n\n    function addToPossibleShownResponsesRef(element) {\n      \n        if (element && !(possibleShownResponsesRef.current.includes(element))){\n            possibleShownResponsesRef.current.push(element);\n        }  \n        \n    }\n    \n    function newQuestion() {\n        possibleShownResponsesRef.current = [];   \n        tourNumber.current ++;\n        \n        if(tourNumber.current > 10){\n          gameOverSetState(true);\n          \n        }\n         \n    \n        let country, newPossibleResponses;\n        country =  data.countriesState.splice(Math.floor(Math.random()*(data.countriesState.length)), 1)[0];\n        data.countriesState.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n    \n        newPossibleResponses = data.countriesState.splice(0, 3);\n        newPossibleResponses = [country, ...newPossibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n      \n        correctResponseSetState(country);\n        possibleResponsesSetState(newPossibleResponses);\n        toggleFlagCapitalSetState(!toggleFlagCapitalState);\n        firstTestSetState(true);\n    }\n      \n    function newRound(){\n        tourNumber.current = 0;\n        score.current = 10;\n        data.countriesSetState(data.storageData.slice());\n        gameOverSetState(false);\n\n    }\n\n\n    function displayQuestion(){\n\n        return toggleFlagCapitalState ? \n                <div>\n                    <div className=\"flag\"><img src={correctResponseState.flag} alt=\"\" /></div>\n                    <div className=\"question\">Which country does this flag belong to? </div>\n                </div>\n                        :\n                <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n        \n    }\n\n    function displayPossibleResponses(){\n\n        return possibleResponsesState.map((possibleResponse, index) => \n                                                    <Response\n                                                      name = {possibleResponse.name}\n                                                      key = {possibleResponse.name} \n                                                      index ={index}\n                                                      correctResponse = {correctResponseState}\n                                                      addToPossibleShownResponsesRef= {addToPossibleShownResponsesRef}\n                                                      possibleShownResponsesRef = {possibleShownResponsesRef.current}\n                                                      firstTestState = {firstTestState}\n                                                      firstTestSetState ={ firstTestSetState}\n                                                      score = {score}\n                                                      newQuestion = {newQuestion}\n                                                    />\n                                                    );\n       \n    }\n\n    function displayScore(){\n        return score.current+ \"/10\";\n    }\n    function displayRemainingQuestions(){\n        return tourNumber.current + \"/10\";\n    }\n    \n    return {newQuestion, newRound, displayQuestion, displayPossibleResponses, displayScore, displayRemainingQuestions, gameOver : gameOverState};\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}