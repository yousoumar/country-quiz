{"version":3,"sources":["assets/adventure.svg","components/Response.js","assets/winners.svg","components/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","firstTestState","firstTestSetState","score","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","ref","String","fromCharCode","className","alt","App","useState","countriesState","countriesSetState","storageCountries","JSON","parse","localStorage","getItem","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","gameOverState","gameOverSetState","toggleFlagCapitalState","toggleFlagCapitalSetState","useRef","tourNumber","includes","push","play","country","splice","Math","floor","random","length","possibleResponses","sort","country1","country2","parseInt","numericCode","useEffect","fetch","then","response","json","data","filter","item","capital","flag","setItem","stringify","id","resultsImg","adventure","map","possibleResponse","newPossibleResponses","target","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b75eeb8e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, firstTestState, firstTestSetState, score}) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport Response from './Response';\nimport resultsImg from '../assets/winners.svg';\n\nfunction App() {\n\n  // store data sent by the API\n  const [countriesState, countriesSetState] = useState([]);\n  const storageCountries = JSON.parse(localStorage.getItem('countries')) ;\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // prevents user from trying the same question multiple times, and toggles next button\n  const [firstTestState, firstTestSetState] = useState(true);\n\n  // play and end game\n  const [gameOverState, gameOverSetState] = useState(false);\n\n  // allows to alternate questions between flag and capital\n  const [toggleFlagCapitalState, toggleFlagCapitalSetState] = useState(false);\n\n  // to store possible responses reference\n  const ref = useRef([]);\n\n  // to store score\n  const score = useRef(10);\n\n  // count the number of game turns\n  const tourNumber = useRef(0);\n\n  useEffect(() => {\n    \n    if (!storageCountries){\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        data = data.filter(item => item.name && item.capital && item.flag && item.numericCode);\n        data.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()))\n        localStorage.setItem('countries', JSON.stringify(data));\n\n        let country = data.splice(Math.floor(Math.random()*(data.length)), 1)[0];\n        let possibleResponses = data.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(data);\n      } );\n    }else{\n\n        play();\n\n    }\n   \n    \n    \n  }, []);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  function newQuestion() {\n    ref.current = [];   \n    tourNumber.current ++;\n    \n    if(tourNumber.current >= 10){\n      gameOverSetState(true);\n      \n    }\n     \n\n    let country, newPossibleResponses;\n    country =  countriesState.splice(Math.floor(Math.random()*(countriesState.length)), 1)[0];\n    countriesState.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    newPossibleResponses = countriesState.splice(0, 3);\n    newPossibleResponses = [country, ...newPossibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n  \n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    toggleFlagCapitalSetState(!toggleFlagCapitalState);\n    firstTestSetState(true);\n  }\n  \n  function play(){\n    let country = storageCountries.splice(Math.floor(Math.random()*(storageCountries.length)), 1)[0];\n    let possibleResponses = storageCountries.splice(0, 3);\n    possibleResponses = [...possibleResponses, country].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    tourNumber.current = 0;\n    score.current = 10;\n    \n\n    correctResponseSetState(country);\n    possibleResponsesSetState(possibleResponses);\n    countriesSetState(storageCountries);\n    gameOverSetState(false)\n  }\n  \n  return (\n    <>\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        {\n          gameOverState ? \n          \n          <div className = \"results\">\n            <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n            <h2>Results</h2>\n            <p>You got <span>{score.current}/10</span> correct answers.</p>\n            <button className=\"button\" onClick = { e => play()}>\n              Try again\n            </button>\n          </div> \n          : \n          <>\n            <div className=\"logo\">\n              <img src={adventure}alt=\"\" /> \n            </div>\n            {\n              toggleFlagCapitalState ? \n              <div>\n                <div className=\"flag\"><img src={correctResponseState.flag} alt=\"\" /></div>\n                <div className=\"question\">Which country does this flag belong to? </div>\n              </div>\n              :\n              <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n            }\n            \n            <ul className=\"responses\">\n              {\n                \n                possibleResponsesState.map((possibleResponse, index) => \n                                          <Response\n                                            name = {possibleResponse.name}\n                                            key = {possibleResponse.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                            score = {score}\n                                          />\n                                          )\n                                          \n             }\n            </ul>\n            {\n              !firstTestState && <button className = \"button next\" onClick = {newQuestion} >Next</button>\n            }\n            \n          </>\n      \n          \n        }\n      </div>\n\n    </div>\n    <footer><p>created by <a target=\"_blank\" href=\"https://github.com/yousoumar\" rel=\"noreferrer\">yousoumar</a> - devchallenges.io</p></footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}