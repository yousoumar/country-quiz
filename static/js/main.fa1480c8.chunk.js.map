{"version":3,"sources":["assets/adventure.svg","components/Response/Response.js","components/App/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","newQuestion","countriesSetState","countriesState","firstTestState","possibleResponsesState","possibleResponsesSetState","firstTestSetState","useRef","current","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","forEach","setTimeout","ref","String","fromCharCode","className","alt","App","useState","console","log","length","correctResponseState","correctResponseSetState","useEffect","fetch","then","response","json","data","country","Math","floor","random","countriesWithoutCurrentQuestionCountry","filter","item","possibleResponses","splice","includes","push","sortMethode","newPossibleResponses","sort","country1","country2","area","population","id","adventure","capital","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa1480c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","import {useRef, useState} from 'react';\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, countriesSetState,  countriesState, newQuestion,possibleResponsesState, possibleResponsesSetState, firstTestState, firstTestSetState }) {\n    // to store score\n    let score = useRef(5).current;\n    \n    function checkResponse(element) {\n        \n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n                if (userResponse === correctResponse.name){\n                    element.classList.add('correct');\n                    element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    \n                }else{\n                    score= score-1;\n                    element.classList.add('incorrect');\n                    element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                    possibleShownResponses.forEach(element => {\n                        if (element.children[1].innerText === correctResponse.name){\n                            element.classList.add('correct');\n                            element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                        }\n                    });\n                }\n        }else{\n            return\n        }\n        \n        \n        setTimeout(()=>{\n            \n            firstTestSetState(true);\n            newQuestion();\n            \n        }, 1000)\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","import {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport adventure from '../../assets/adventure.svg';\nimport Response from '../Response/Response';\n\nfunction App() {\n\n  // to store data sent by the API\n  const [countriesState, countriesSetState] = useState([]);\n  console.log(countriesState.length)\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n\n  useEffect(() => {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n    .then(response => response.json())\n    .then(data =>{\n      let country = data[Math.floor(Math.random()*(data.length))];\n      let countriesWithoutCurrentQuestionCountry = data.filter(item => item.name !== country.name);\n      let possibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      possibleResponses = [country, ...possibleResponses]\n      correctResponseSetState(country);\n      possibleResponsesSetState(possibleResponses);\n      countriesSetState(countriesWithoutCurrentQuestionCountry);\n    } );\n    \n    \n  }, []);\n\n\n  // to store possible responses\n  const ref = useRef([]);\n  console.log(ref.current)\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  let [firstTestState, firstTestSetState] = useState(true);\n  let sortMethode = useRef(true)\n\n  function newQuestion() {\n    console.log(possibleResponsesState)\n    ref.current = [];\n    countriesSetState(countriesState.filter(item => item.name !== correctResponseState.name));\n\n    let country,countriesWithoutCurrentQuestionCountry ,newPossibleResponses;\n    country = countriesState[Math.floor(Math.random()*(countriesState.length))];\n    if(!sortMethode.current){\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name).sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses = [country, ...newPossibleResponses];\n      newPossibleResponses.sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n    }else{\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name);\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses.push(country);\n      newPossibleResponses.sort((country1, country2)=> (country2.area*Math.random() - country1.area*Math.random()))\n    }\n    countriesSetState(countriesWithoutCurrentQuestionCountry);\n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n  }\n\n  return (\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        <div className=\"logo\">\n          <img src={adventure}alt=\"\" /> \n        </div>\n        <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n        <ul className=\"responses\">\n          {\n\n            possibleResponsesState.map((response, index) => \n                                          <Response\n                                            name = {response.name}\n                                            key = {response.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            countriesSetState = {countriesSetState}\n                                            countriesState = {countriesState}\n                                            newQuestion = {newQuestion}\n                                            possibleResponsesSetState = {possibleResponsesSetState}\n                                            possibleResponsesState = {possibleResponsesState}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                          />\n                                          )\n                                          \n          }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}