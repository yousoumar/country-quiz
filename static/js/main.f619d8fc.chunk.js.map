{"version":3,"sources":["assets/adventure.svg","assets/winners.svg","components/Loader.js","components/Response.js","components/App.js","components/useFetch.js","components/useGame.js","index.js"],"names":["Loader","className","Response","name","index","correctResponse","possibleShownResponsesRef","addToPossibleShownResponsesRef","firstTestState","firstTestSetState","score","newQuestion","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","alt","App","url","useState","countriesState","countriesSetState","storageData","useRef","apiErrorState","apiErrorSetState","loaderState","loaderSetState","useEffect","timer","fetch","then","response","json","data","filter","item","capital","flag","numericCode","slice","catch","clearTimeout","useFetch","toggleFlagCapitalState","toggleFlagCapitalSetState","gameOverState","gameOverSetState","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","tourNumber","includes","push","country","newPossibleResponses","splice","Math","floor","random","length","sort","country1","country2","parseInt","newRound","displayQuestion","displayPossibleResponses","map","possibleResponse","displayScore","displayRemainingQuestions","gameOver","useGame","id","resultsImg","adventure","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f619d8fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","export default function Loader() {\n    return (\n        <div className = \"loader\">\n            \n            <p>Loading...</p>\n        </div>\n    )\n}\n","\nexport default function Response({name, index, correctResponse, possibleShownResponsesRef, addToPossibleShownResponsesRef, firstTestState, firstTestSetState, score, newQuestion}) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg';\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponsesRef.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg';\n                    }\n                });\n            }\n        }else{\n            return;\n        }\n\n        setTimeout(()=>{\n            \n            newQuestion();\n            \n        }, 1500);\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToPossibleShownResponsesRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","import {useEffect} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport resultsImg from '../assets/winners.svg';\nimport Loader from './Loader';\nimport useFetch from './useFetch';\nimport useGame from './useGame';\n\nfunction App() {\n\n  const {\n          countriesState, \n          countriesSetState, \n          storageData, \n          apiErrorState, \n          loaderState\n        } = useFetch(\"https://restcountries.eu/rest/v2/all\");\n\n  const {\n          newRound, \n          newQuestion, \n          displayQuestion, \n          displayPossibleResponses,\n          displayScore,\n          displayRemainingQuestions, \n          gameOver, \n        } = useGame (storageData, countriesSetState, countriesState);\n\n  \n  useEffect(()=>{\n\n    if (countriesState.length !== 0 ){\n      newQuestion();\n    }\n   \n    // eslint-disable-next-line\n  }, [countriesState]);\n  \n  return (\n    <>\n      {\n        loaderState === 'loading' ? <Loader /> : \n        <>\n          {\n            apiErrorState ? <p className = \"apiError\">We have issues with our database. Please come back later :)</p> : \n              <div id=\"app\">\n                <h1>Country quiz</h1>\n                <div className=\"container\">\n                  {\n                    gameOver ? \n                    \n                    <div className = \"results\">\n                      <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n                      <h2>Results</h2>\n                      <p>You got <span>{displayScore()}</span> correct answers.</p>\n                      <button className=\"button\" onClick = { e => newRound()}>\n                        Try again\n                      </button>\n                    </div> \n                    : \n                    <>\n                      <div className=\"logo\">\n                        <img src={adventure}alt=\"\" /> \n                      </div>\n                      <div className = \"tour-number\"> {displayRemainingQuestions()}</div>\n                      {\n                        displayQuestion()\n                      }\n                      \n                      <ul className=\"responses\">\n                        {\n                          \n                          displayPossibleResponses()\n                                                    \n                        }\n                      </ul> \n                    </>\n                  }\n                </div>\n\n              </div>\n          }\n        </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","import {useState, useEffect, useRef} from 'react';\n\nexport default function useFetch(url) {\n\n    // stores data sent by the API\n    const [countriesState, countriesSetState] = useState([]);\n\n    // stores data sent by the API so that we have less requests\n    const storageData = useRef([]);\n\n    // to handle api call errors\n    const [apiErrorState, apiErrorSetState] = useState(false);\n\n    // what allows us to handle our loader\n    const [loaderState, loaderSetState] = useState('loading');\n\n    useEffect(() => {\n\n        const timer = setTimeout(()=>{\n            fetch(url)\n            .then(response => response.json())\n            .then(data =>{\n                data = data.filter(item => item.name && item.capital && item.flag && item.numericCode);\n                storageData.current = data.slice();\n                countriesSetState(data.slice());\n                loaderSetState('loaded');\n                \n            })\n            .catch(()=>{\n                apiErrorSetState(true);\n                loaderSetState('loaded');\n            });\n        }, 1000); \n\n        return ()=>{\n            clearTimeout(timer);\n        }\n        \n    }, [url]);\n\n    return {countriesState, countriesSetState, storageData : storageData.current, apiErrorState, loaderState};\n}\n","import {useState, useRef} from 'react';\nimport Response from './Response';\n\nexport default function useGame(storageData, countriesSetState, countriesState) {\n\n    // allows to alternate questions between flag and capital\n    const [toggleFlagCapitalState, toggleFlagCapitalSetState] = useState(false);\n\n    // play and end game\n    const [gameOverState, gameOverSetState] = useState(false);\n\n    // prevents user from trying the same question multiple times\n    const [firstTestState, firstTestSetState] = useState(true);\n\n    // current question response\n    const [correctResponseState, correctResponseSetState] = useState({});\n\n    // current question possible responses\n    const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n    // stores possible responses reference\n    const possibleShownResponsesRef = useRef([]);\n\n    // stores score\n    const score = useRef(10);\n\n    // counts remaining questions number \n    const tourNumber = useRef(0);\n \n\n    function addToPossibleShownResponsesRef(element) {\n      \n        if (element && !(possibleShownResponsesRef.current.includes(element))){\n            possibleShownResponsesRef.current.push(element);\n        }  \n        \n    }\n    \n    function newQuestion() {\n        possibleShownResponsesRef.current = [];   \n        tourNumber.current ++;\n        \n        if(tourNumber.current > 10){\n          gameOverSetState(true);\n          \n        }\n         \n    \n        let country, newPossibleResponses;\n        country =  countriesState.splice(Math.floor(Math.random()*(countriesState.length)), 1)[0];\n        countriesState.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n    \n        newPossibleResponses = countriesState.splice(0, 3);\n        newPossibleResponses = [country, ...newPossibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n      \n        correctResponseSetState(country);\n        possibleResponsesSetState(newPossibleResponses);\n        toggleFlagCapitalSetState(!toggleFlagCapitalState);\n        firstTestSetState(true);\n    }\n      \n    function newRound(){\n        tourNumber.current = 0;\n        score.current = 10;\n        countriesSetState(storageData.slice());\n        gameOverSetState(false);\n\n    }\n\n\n    function displayQuestion(){\n\n        return toggleFlagCapitalState ? \n                <div>\n                    <div className=\"flag\"><img src={correctResponseState.flag} alt=\"\" /></div>\n                    <div className=\"question\">Which country does this flag belong to? </div>\n                </div>\n                        :\n                <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n        \n    }\n\n    function displayPossibleResponses(){\n\n        return possibleResponsesState.map((possibleResponse, index) => \n                                                    <Response\n                                                      name = {possibleResponse.name}\n                                                      key = {possibleResponse.name} \n                                                      index ={index}\n                                                      correctResponse = {correctResponseState}\n                                                      addToPossibleShownResponsesRef= {addToPossibleShownResponsesRef}\n                                                      possibleShownResponsesRef = {possibleShownResponsesRef.current}\n                                                      firstTestState = {firstTestState}\n                                                      firstTestSetState ={ firstTestSetState}\n                                                      score = {score}\n                                                      newQuestion = {newQuestion}\n                                                    />\n                                                    );\n       \n    }\n\n    function displayScore(){\n        return score.current+ \"/10\";\n    }\n    function displayRemainingQuestions(){\n        return tourNumber.current + \"/10\";\n    }\n    return {\n                newQuestion, \n                newRound, \n                displayQuestion, \n                displayPossibleResponses,\n                displayScore,\n                displayRemainingQuestions,\n                gameOver : gameOverState,\n            };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}