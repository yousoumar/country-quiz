{"version":3,"sources":["assets/adventure.svg","components/Response.js","assets/winners.svg","assets/loading.svg","components/Loader.js","components/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","firstTestState","firstTestSetState","score","newQuestion","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","className","alt","Loader","loading","App","useState","countriesState","countriesSetState","storageCountries","JSON","parse","sessionStorage","getItem","correctResponseState","correctResponseSetState","possibleResponsesState","possibleResponsesSetState","gameOverState","gameOverSetState","toggleFlagCapitalState","toggleFlagCapitalSetState","apiErrorState","apiErrorSetState","loaderState","loaderSetState","useRef","tourNumber","includes","push","country","newPossibleResponses","splice","Math","floor","random","length","sort","country1","country2","parseInt","numericCode","useEffect","timer","fetch","then","response","json","data","filter","item","capital","flag","setItem","stringify","possibleResponses","catch","clearTimeout","id","resultsImg","play","adventure","map","possibleResponse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d88bac8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","\nexport default function Response({name, index, correctResponse, possibleShownResponses, addToRef, firstTestState, firstTestSetState, score, newQuestion}) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }else{\n            return;\n        }\n\n        setTimeout(()=>{\n            \n            newQuestion();\n            \n        }, 1500);\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","export default __webpack_public_path__ + \"static/media/loading.8a15e6ab.svg\";","import loading from '../assets/loading.svg'\n\nexport default function Loader() {\n    return (\n        <div className = \"loader\">\n            <img src={loading} alt=\"\" />\n            <p>Loading...</p>\n        </div>\n    )\n}\n","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../assets/adventure.svg';\nimport Response from './Response';\nimport resultsImg from '../assets/winners.svg';\nimport Loader from './Loader';\n\nfunction App() {\n\n  // stores data sent by the API\n  const [countriesState, countriesSetState] = useState([]);\n\n  // stores data sent by the API in session storage so that we have less requests\n  const storageCountries = JSON.parse(sessionStorage.getItem('countries')) ;\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // prevents user from trying the same question multiple times\n  const [firstTestState, firstTestSetState] = useState(true);\n\n  // play and end game\n  const [gameOverState, gameOverSetState] = useState(false);\n\n  // allows to alternate questions between flag and capital\n  const [toggleFlagCapitalState, toggleFlagCapitalSetState] = useState(false);\n\n  // to handle api call errors\n  const [apiErrorState, apiErrorSetState] = useState(false);\n\n  // what allows us to handle our loader\n  const [loaderState, loaderSetState] = useState('');\n  \n  // to store possible responses reference\n  const ref = useRef([]);\n\n  // to store score\n  const score = useRef(10);\n\n  // count the number of game turns\n  const tourNumber = useRef(0);\n\n  useEffect(() => {\n\n    const timer = setTimeout(()=>{\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        data = data.filter(item => item.name && item.capital && item.flag && item.numericCode);\n        data.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()))\n        sessionStorage.setItem('countries', JSON.stringify(data));\n  \n        let country = data.splice(Math.floor(Math.random()*(data.length)), 1)[0];\n        let possibleResponses = data.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n  \n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(data);\n        loaderSetState('loaded');\n      })\n      .catch(()=>{\n        apiErrorSetState(true);\n        loaderSetState('loaded');\n      });\n    }, 1000); \n\n    return ()=>{\n      clearTimeout(timer);\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  function newQuestion() {\n    ref.current = [];   \n    tourNumber.current ++;\n    \n    if(tourNumber.current > 10){\n      gameOverSetState(true);\n      \n    }\n     \n\n    let country, newPossibleResponses;\n    country =  countriesState.splice(Math.floor(Math.random()*(countriesState.length)), 1)[0];\n    countriesState.sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    newPossibleResponses = countriesState.splice(0, 3);\n    newPossibleResponses = [country, ...newPossibleResponses].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n  \n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    toggleFlagCapitalSetState(!toggleFlagCapitalState);\n    firstTestSetState(true);\n  }\n  \n  function play(){\n    let country = storageCountries.splice(Math.floor(Math.random()*(storageCountries.length)), 1)[0];\n    let possibleResponses = storageCountries.splice(0, 3);\n    possibleResponses = [...possibleResponses, country].sort((country1, country2)=> (parseInt(country2.numericCode)*Math.random()- parseInt(country1.numericCode)*Math.random()));\n\n    tourNumber.current = 1;\n    score.current = 10;\n    \n\n    correctResponseSetState(country);\n    possibleResponsesSetState(possibleResponses);\n    countriesSetState(storageCountries);\n    gameOverSetState(false)\n  }\n  \n  return (\n    <>\n      {\n        loaderState === '' ? <Loader /> : \n        <>\n          {\n            apiErrorState ? <p className = \"apiError\">We have issues with our database. Please come back later :)</p> : \n              <div id=\"app\">\n                <h1>Country quiz</h1>\n                <div className=\"container\">\n                  {\n                    gameOverState ? \n                    \n                    <div className = \"results\">\n                      <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n                      <h2>Results</h2>\n                      <p>You got <span>{score.current}/10</span> correct answers.</p>\n                      <button className=\"button\" onClick = { e => play()}>\n                        Try again\n                      </button>\n                    </div> \n                    : \n                    <>\n                      <div className=\"logo\">\n                        <img src={adventure}alt=\"\" /> \n                      </div>\n                      <div className = \"tour-number\">{tourNumber.current}/10</div>\n                      {\n                        toggleFlagCapitalState ? \n                        <div>\n                          <div className=\"flag\"><img src={correctResponseState.flag} alt=\"\" /></div>\n                          <div className=\"question\">Which country does this flag belong to? </div>\n                        </div>\n                        :\n                        <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n                      }\n                      \n                      <ul className=\"responses\">\n                        {\n                          \n                          possibleResponsesState.map((possibleResponse, index) => \n                                                    <Response\n                                                      name = {possibleResponse.name}\n                                                      key = {possibleResponse.name} \n                                                      index ={index}\n                                                      correctResponse = {correctResponseState}\n                                                      addToRef= {addToRef}\n                                                      possibleShownResponses = {ref.current}\n                                                      firstTestState = {firstTestState}\n                                                      firstTestSetState ={ firstTestSetState}\n                                                      score = {score}\n                                                      newQuestion = {newQuestion}\n                                                    />\n                                                    )\n                                                    \n                      }\n                      </ul> \n                    </>\n                \n                    \n                  }\n                </div>\n\n              </div>\n          }\n        </>\n      }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}