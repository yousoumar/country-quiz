{"version":3,"sources":["assets/adventure.svg","components/Response/Response.js","assets/winners.svg","components/App/App.js","index.js"],"names":["Response","name","index","correctResponse","possibleShownResponses","addToRef","newQuestion","countriesSetState","countriesState","firstTestState","possibleResponsesState","possibleResponsesSetState","firstTestSetState","score","onClick","e","element","currentTarget","children","innerText","classList","add","querySelector","src","process","current","forEach","setTimeout","ref","String","fromCharCode","className","alt","App","storageCountries","JSON","parse","localStorage","getItem","useState","correctResponseState","correctResponseSetState","useRef","tourNumber","gameOverState","gameOverSetState","useEffect","country","Math","floor","random","length","countriesWithoutCurrentQuestionCountry","filter","item","possibleResponses","splice","fetch","then","response","json","data","setItem","stringify","includes","push","sortMethode","newPossibleResponses","sort","country1","country2","area","population","id","resultsImg","adventure","capital","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b9a14fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","import {useRef, useState} from 'react';\nexport default function Response(\n    {name, index, correctResponse, possibleShownResponses, addToRef, countriesSetState,  countriesState, newQuestion,possibleResponsesState, possibleResponsesSetState, firstTestState, firstTestSetState,score }) {\n    \n    function checkResponse(element) {\n\n        if(firstTestState){\n            firstTestSetState(false);\n            let userResponse = element.children[1].innerText;\n            if (userResponse === correctResponse.name){\n                element.classList.add('correct');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                \n            }else{\n                score.current --;\n                element.classList.add('incorrect');\n                element.querySelector('img').src = process.env.PUBLIC_URL + '/images/incorrect.svg';\n                possibleShownResponses.forEach(element => {\n                    if (element.children[1].innerText === correctResponse.name){\n                        element.classList.add('correct');\n                        element.querySelector('img').src = process.env.PUBLIC_URL + '/images/correct.svg'\n                    }\n                });\n            }\n        }else{\n            return\n        }\n        \n        \n        setTimeout(()=>{\n            \n            firstTestSetState(true);\n            newQuestion();\n            \n        }, 1000)\n\n    }\n\n    return (\n        <li\n            key = {name} \n            onClick = {(e) => checkResponse(e.currentTarget)}\n            ref = {addToRef}\n            \n        >\n            <span>{String.fromCharCode(65 + index)}</span>\n            <span>{name}</span>\n            <span className = \"icon\"><img src=\"\" alt=\"\" /></span>\n        </li>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","import {useState, useEffect, useRef} from 'react';\nimport adventure from '../../assets/adventure.svg';\nimport Response from '../Response/Response';\nimport resultsImg from '../../assets/winners.svg';\n\nfunction App() {\n\n  // store data sent by the API\n  const storageCountries = JSON.parse(localStorage.getItem('countries')) ;\n  const [countriesState, countriesSetState] = useState([]);\n\n  // current question response\n  const [correctResponseState, correctResponseSetState] = useState({});\n\n  // current question possible responses\n  const [possibleResponsesState, possibleResponsesSetState] = useState([]);\n\n  // to store score\n  const score = useRef(5);\n\n  // count the number of game turns\n  let tourNumber = useRef(0);\n\n  const [gameOverState, gameOverSetState] = useState(false);\n  useEffect(() => {\n    if (!storageCountries){\n      fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(data =>{\n        localStorage.setItem('countries', JSON.stringify(data));\n\n        let country = data[Math.floor(Math.random()*(data.length))];\n        let countriesWithoutCurrentQuestionCountry = data.filter(item => item.name !== country.name);\n        let possibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses];\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(countriesWithoutCurrentQuestionCountry);\n      } );\n    }else{\n\n        let country = storageCountries[Math.floor(Math.random()*(storageCountries.length))];\n        let countriesWithoutCurrentQuestionCountry = storageCountries.filter(item => item.name !== country.name);\n        let possibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n        possibleResponses = [country, ...possibleResponses];\n\n        correctResponseSetState(country);\n        possibleResponsesSetState(possibleResponses);\n        countriesSetState(countriesWithoutCurrentQuestionCountry);\n\n    }\n   \n    \n    \n  }, []);\n\n\n  // to store possible responses reference\n  const ref = useRef([]);\n\n  function addToRef(element) {\n      \n    if (element && !(ref.current.includes(element))){\n      ref.current.push(element);\n    }  \n    \n  }\n  \n  let [firstTestState, firstTestSetState] = useState(true);\n  let sortMethode = useRef(true)\n\n  function newQuestion() {\n    tourNumber.current ++;\n    if(tourNumber.current >= 5){\n      gameOverSetState(true)\n    }\n    ref.current = [];\n    countriesSetState(countriesState.filter(item => item.name !== correctResponseState.name));\n    \n\n    let country,countriesWithoutCurrentQuestionCountry ,newPossibleResponses;\n    country = countriesState[Math.floor(Math.random()*(countriesState.length))];\n    if(!sortMethode.current){\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name).sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses = [country, ...newPossibleResponses];\n      newPossibleResponses.sort((country1, country2)=> (country2.population*Math.random()- country1.population*Math.random()));\n    }else{\n      sortMethode.current = !sortMethode.current\n      countriesWithoutCurrentQuestionCountry = countriesState.filter(item => item.name !== country.name);\n      newPossibleResponses = countriesWithoutCurrentQuestionCountry.splice(0, 3);\n      newPossibleResponses.push(country);\n      newPossibleResponses.sort((country1, country2)=> (country2.area*Math.random() - country1.area*Math.random()))\n    }\n    countriesSetState(countriesWithoutCurrentQuestionCountry);\n    correctResponseSetState(country);\n    possibleResponsesSetState(newPossibleResponses);\n    firstTestSetState(true);\n  }\n\n  return (\n    <div id=\"app\">\n      <h1>Country quiz</h1>\n      <div className=\"container\">\n        {\n          gameOverState ? \n          \n          <div className = \"results\">\n            <div className=\"img\"><img src={resultsImg} alt=\"\" /></div>\n            <h2>Results</h2>\n            <p>You got <span>{score.current}</span> correct answers</p>\n            <button className=\"button\">\n              Try again\n            </button>\n          </div> \n          : \n          <>\n            <div className=\"logo\">\n            <img src={adventure}alt=\"\" /> \n            </div>\n            <div className=\"question\">{correctResponseState.capital} is the capital of ?</div>\n            <ul className=\"responses\">\n              {\n                \n                possibleResponsesState.map((response, index) => \n                                          <Response\n                                            name = {response.name}\n                                            key = {response.name} \n                                            index ={index}\n                                            correctResponse = {correctResponseState}\n                                            addToRef= {addToRef}\n                                            possibleShownResponses = {ref.current}\n                                            countriesSetState = {countriesSetState}\n                                            countriesState = {countriesState}\n                                            newQuestion = {newQuestion}\n                                            possibleResponsesSetState = {possibleResponsesSetState}\n                                            possibleResponsesState = {possibleResponsesState}\n                                            firstTestState = {firstTestState}\n                                            firstTestSetState ={ firstTestSetState}\n                                            gameOverSetState = {gameOverSetState}\n                                            score = {score}\n                                            tourNumber = {tourNumber}\n                                  \n                                          />\n                                          )\n                                          \n             }\n            </ul>\n          </>\n      \n          \n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}